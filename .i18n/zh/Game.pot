msgid ""
msgstr "Project-Id-Version: Game v4.7.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: Tue Mar 18 22:54:40 2025\n"
"Last-Translator: \n"
"Language-Team: none\n"
"Language: zh\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit"

#: GameServer.RpcHandlers
msgid "Level completed! 🎉"
msgstr ""

#: GameServer.RpcHandlers
msgid "level completed with warnings… 🎭"
msgstr ""

#: GameServer.RpcHandlers
msgid "intermediate goal solved! 🎉"
msgstr ""

#: Game.Levels.Basic.L01_UniverseType
msgid "宇宙类型"
msgstr ""

#: Game.Levels.Basic.L01_UniverseType
msgid "# 凡事皆有类型\n"
"类型论基本原则——*凡事皆有类型 (Every term has a type)* 。任何一个依赖类型论语言需要一些内置的类型作为它的基本元素，因为如果没有类型，那就没有事物。在 Lean4 里，事物称为 `Term`，类型称为 `Type`。\n"
"\n"
"## 宇宙类型\n"
"Lean4 内置了一系列基础类型，它们统称为**宇宙类型** (universe type) ，具体包含：`Sort 0`、`Sort 1`、`Sort2`……。并且规定 `Sort 0` 的类型是 `Sort 1`，`Sort 1` 的类型是 `Sort 2` 等等。`Sort` 在 Lean4 里是一个关键词。Lean4 用 `Term : Type` 语法表示事物和它的类型，例如 `Sort 0 : Sort 1`  表示 `Sort 0` 的类型是 `Sort 1`。\n"
"\n"
"`Sort` 后面除了可以跟自然数符号之外，Lean4 允许声明抽象的符号 `universe u` 。声明`u`后，我们可以抽象地表述宇宙类型的关系`Sort u : Sort (u + 1)`。`0 1 2 u` 统称为**宇宙层级** (universe level)，宇宙层级不是 `Term`，没有类型。\n"
"\n"
"```mermaid\n"
"graph LR\n"
"	A[Sort 0] --> B[Sort 1] --> C[Sort 2] --> D[Sort 3]\n"
"```\n"
"\n"
"Lean4 给各个宇宙层级起了一些别名，比如：`Sort 0` 的别名是 `Sort` 和 `Prop`，`Sort 1` 的别名是`Type` 和 `Type 0`，`Sort 2` 的别名是`Type 1`。抽象地说，`Type u` 是 `Sort (u + 1)` 的别名。\n"
"\n"
"```mermaid\n"
"graph LR\n"
"	A[Sort 0<br>Sort<br>Prop] --> B[Sort 1<br>Type<br>Type 0] --> C[Sort 2<br>---<br>Type 1] --> D[Sort 3<br>---<br>Type 2]\n"
"```\n"
"\n"
"在 Lean4 里可以使用 `#check` 命令来查看一个 `Term` 的类型\n"
"```lean\n"
"#check Prop   -- Prop : Type\n"
"#check Type   -- Type : Type 1\n"
"#check Sort 0 -- Prop : Type\n"
"#check Sort 1 -- Type : Type 1\n"
"universe u\n"
"#check Sort u -- Sort u : Type u\n"
"```"
msgstr ""

#: Game.Levels.Basic.L01_UniverseType
msgid "请写出一个表达式，它的类型是`Sort 1`。"
msgstr ""

#: Game.Levels.Basic.L01_UniverseType
msgid "提示：你可以尝试写下`exact Sort 0`，`exact Sort`或者`exact Prop`."
msgstr ""

#: Game.Levels.Basic.L01_UniverseType
msgid "总结：\n"
"- `Sort 0`的类型是`Sort 1`；\n"
"- `Sort`和`Prop`是`Sort 0`的别名；\n"
"- `Type`是`Sort 1`的别名。"
msgstr ""

#: Game.Levels.Basic.L01_UniverseType
msgid "可以使用 `exact` 将一个表达式应用到目标上，如果表达式的类型和目标相同，则表示证明完成。"
msgstr ""

#: Game.Levels.Basic.L02_Function
msgid "函数"
msgstr ""

#: Game.Levels.Basic.L02_Function
msgid "# 函数\n"
"**函数**是一种内置的 `Term` ，也叫做 **Lambda 表达式**。Lean4 规定 Lambda 表达式的构造语法是 `fun (ArgTerm : ArgType) => BodyTerm` ，例如：`fun (a : Prop) => a` 。Lambda 表达式的简化语法是 `ArgTerm => BodyTerm`，例如 `fun a => a`。\n"
"\n"
"*凡事皆有类型*，**函数的类型**是另外一种内置的 `Term`，也叫做 **Forall 表达式**，或者 **箭头表达式**。Lean4 规定 箭头表达式的构造语法是 `(ArgTerm : ArgType) -> BodyType` ，例如 `(a : Prop) -> Prop` 。箭头表达式的简化语法是 `ArgType -> BodyType`，例如 `Prop -> Prop` 。并且，箭头表达式要求输入类型的类型和输出类型必须是宇宙层级，即 `ArgType : Sort u` 和 `BodyType : Sort v` 。\n"
"\n"
"Lean4 规定 Lambda 表达式 `fun (ArgTerm : ArgType) => BodyTerm` 对应的类型是 箭头表达式 `(ArgTerm : ArgType) -> BodyType`，其中 `BodyTerm : BodyType` 。例如函数 `fun (a : Prop) => a` 的类型是 `(a : Prop) -> Prop`。\n"
"\n"
"可以在 Lean4 中用如下代码检验：\n"
"```lean\n"
"#check fun (a : Prop) => a           -- Prop → Prop\n"
"```"
msgstr ""

#: Game.Levels.Basic.L02_Function
msgid "请写出一个**函数**表达式，它的类型是`Prop -> Prop -> Prop`。(箭头是右结合的)"
msgstr ""

#: Game.Levels.Basic.L02_Function
msgid "提示：\n"
"- 你可以尝试写下`exact fun (a : Prop) => fun (b : Prop) => a`；\n"
"- 函数体没有使用到的参数名字推荐用`_`代替，所以等价表达式为`exact fun (a : Prop) => fun (_ : Prop) => a`；\n"
"- 嵌套的函数中间的`fun => `可以省略，所以等价表达式为`exact fun (a : Prop) (_ : Prop) => a`。"
msgstr ""

#: Game.Levels.Basic.L02_Function
msgid "总结：\n"
"- **函数**在lean4里用 `fun (ArgTerm : ArgType) => BodyTerm` 表示；\n"
"- **函数类型**在lean4里用 `(ArgType : ArgType) -> BodyType` 表示，其中 `BodyTerm:BodyType`。"
msgstr ""

#: Game.Levels.Basic.L03_FunctionType
msgid "函数类型"
msgstr ""

#: Game.Levels.Basic.L03_FunctionType
msgid "# 函数类型\n"
"*凡事皆有类型*，箭头表达式也应该有类型。Lean4 规定 `(ArgTerm : ArgType) -> BodyType` 的类型是 `Sort (imax u v)` ，其中：\n"
"- `ArgType : Sort u`；\n"
"- `BodyType : Sort v`；\n"
"- `imax` 是 Lean4 内置的一个条件最值函数：当 `v = 0` 时 `imax u v = 0`；当 `v != 0` 时 `imax u v = max u v`；\n"
"-  `max` 是 Lean4 内置的函数，表示取 `u` 和 `v` 中最大值。\n"
"\n"
"根据这条规则，我们来分析一下 箭头表达式 `(a : Prop) -> Prop` 的类型。因为 `Prop : Sort 1`，所以 `u=1` 和 `v=1`，然后可得它的类型是 `Sort (imax 1 1)`，化简后可得 `Sort 1`。综上，`Prop -> Prop` 的类型是 `Sort 1`，也就是 `Type`。\n"
"\n"
"可以在 Lean4 中用如下代码检验：\n"
"```lean\n"
"#check Prop -> Prop                  -- Type\n"
"universe u v\n"
"#check (a : Sort u) -> Sort v -> a   -- Sort (imax (u + 1) (v + 1) u)\n"
"```\n"
"\n"
"箭头表达式允许嵌套使用，并且满足右结合性。我们来分析一下这个复杂的表达式，`(a : Sort u) -> Sort v -> a`，的类型。首先是 `Sort v -> a` 部分，因为 `Sort v : Sort (v + 1)` 和 `a : Sort u`，所以 `Sort v -> a` 的类型是 `Sort (imax (v + 1) u)`。 接着我们看 `(a : Sort u) -> ...` 部分，因为 `Sort u : Sort (u + 1)`，所以整个表达式的类型是 `Sort (imax (u + 1) (imax (v + 1) u))`。补充一个规定，Lean4 里的 `max` 和 `imax` 是一个多元表达式，`Sort (imax (u + 1) (imax (v + 1) u))` 可以简写成 `Sort (imax (u + 1) (v + 1) u)`。\n"
"\n"
"```mermaid\n"
"graph LR\n"
"    subgraph Sort\n"
"        direction LR\n"
"        A[Sort 0<br>Sort<br>Prop] --> B[Sort 1<br>Type<br>Type 0]\n"
"        B --> C[Sort 2<br>---<br>Type 1]\n"
"        C --> D[Sort 3<br>---<br>Type 2]\n"
"    end\n"
"    E[Forall] -.-> A\n"
"    F[Lambda] --> E\n"
"```\n"
"\n"
"## 宇宙层级补充\n"
"在 Lean4 中，宇宙类型 `Sort` 后面跟着的宇宙符号有且仅有五种情况：\n"
"- 自然数符号：`0 1 2`；\n"
"- 抽象符号：`u v w`，在 `universe u v w` 声明后才能使用；\n"
"- 加一运算符：`u + 1`；\n"
"- `max` 运算符：`max u v`；\n"
"- `imax` 运算符：`imax u v`。\n"
"*凡事皆有类型*，宇宙层级不是一个 `Term`，它没有类型。"
msgstr ""

#: Game.Levels.Basic.L03_FunctionType
msgid "请写出一个**函数类型**表达式，它的类型是`Sort (imax (u + 1) (v + 1) u)`。\n"
"- 游戏引擎已经提前声明了宇宙层级`u v`，你可以直接使用。"
msgstr ""

#: Game.Levels.Basic.L03_FunctionType
msgid "提示：你可以尝试写下`exact (a : Sort u) -> Sort v -> a`"
msgstr ""

#: Game.Levels.Basic.L03_FunctionType
msgid "总结：\n"
"- **函数**在lean4里用 `fun (ArgTerm : ArgType) => BodyTerm` 表示；\n"
"- **函数类型**在lean4里用 `(ArgType : ArgType) -> BodyType` 表示，其中 `BodyTerm:BodyType`。\n"
"- **函数类型**的类型是**宇宙类型**；\n"
"- `imax` 是 Lean4 内置的一个条件最值函数：当 `v = 0` 时 `imax u v = 0`；当 `v != 0` 时 `imax u v = max u v`；\n"
"-  `max` 是 Lean4 内置的函数，表示取 `u` 和 `v` 中最大值。"
msgstr ""

#: Game.Levels.Basic.L04_Inductive
msgid "归纳类型"
msgstr ""

#: Game.Levels.Basic.L04_Inductive
msgid "# 归纳类型\n"
"在前面，我们见到了 Lean4 里的一些基本类型：宇宙类型`Prop, Type 0, Type 1, Type2 ...`，函数以及函数类型。但是，这些类型表达能力还是太弱了。为了描述更具体的事物，我们需要定义新的类型。\n"
"\n"
"Lean4 提供了一个叫做 `inductive` 的命令来让我们定义新的类型。由 `inductive` 命令定义的类型称为**归纳类型**。归纳类型的定义方式和数学归纳法类似，我们需要定义这个类型的构造器和构造器的类型。\n"
"值得注意的是，我们只需要宇宙类型、函数、函数类型和归纳类型这几种类型就可以定义出数学中所有的类型。它的具体语法如下：\n"
"```lean\n"
"inductive Foo where\n"
"  | constructor₁ : ... → Foo\n"
"  | constructor₂ : ... → Foo\n"
"  ...\n"
"  | constructorₙ : ... → Foo\n"
"```\n"
"\n"
"## 例子\n"
"```lean\n"
"inductive Eq : {α : Sort u} -> α -> α -> Prop where\n"
"  | refl : {α : Sort u} -> (a : α) -> Eq a a\n"
"```\n"
"在这个例子中，我们定义了一个叫做 `Eq` 的归纳类型，它有一个参数 `α` 和一个构造器 `refl`。`refl` 构造器接受一个类型为 `α` 的值 `a`，并返回一个类型为 `Eq a a` 的值。\n"
"\n"
"这里补充一个语法规则：\n"
"- 其中参数 `α` 由花括号包裹，表示它是一个隐式参数。这样定义的好处是，当我们使用 `Eq` 类型时，Lean4 可以自动推断出 `α` 的类型。\n"
"\n"
"命令`inductive`实际上做了这么几件事情：\n"
"- 将名字`Eq`注册为一个类型，并且标记它的类型是 `{α : Sort u} -> α -> α -> Prop`；\n"
"- 自动生成了一个构造函数`Eq.refl`，和循环子`Eq.rec`作为它的公理。\n"
"在 Lean4 中可以用如下代码来验证这一点：\n"
"```lean\n"
"namespace MyLogic\n"
"inductive Eq : {α : Sort u} → α → α → Prop where\n"
"  | refl : (a : α) → Eq a a\n"
"#check Eq.refl\n"
"  -- ∀ {α : Sort u} (a : α), Eq a a\n"
"#check Eq.rec\n"
"  -- {α : Sort u} →\n"
"  --  {a : α} → {motive : (a_1 : α) → Eq a a_1 → Sort u_1} →\n"
"  --    motive a (Eq.refl a) →\n"
"  --      {a_1 : α} → (t : Eq a a_1) → motive a_1 t\n"
"```\n"
"后面的关卡我们会详细讲解它们的用法。\n"
"\n"
"这里涉及三个新的语法规则：\n"
"- 首先，`∀` 符号表示“对于任意”，它其实是箭头函数的另一种写法。比如 `∀ {α : Sort u} (a : α), Eq a a` 等价于 `{α : Sort u} -> (a : α) -> Eq a a`；\n"
"- 其次，`→` 和 `->` 是等价的；\n"
"- 最好，构造器可以简写成 `| refl : (a : α) → Eq a a` 由编译器自动补全 `α` 的类型。\n"
"\n"
"我想你已经感受到了，lean4中类似的语法糖非常多，主要是为了方便书写和阅读，大家需要适应一下。\n"
"\n"
"补充一个小技巧：在编辑器输入`\\a` 可以获得希腊字母 `α`，`∖forall`可以得到全称量词符号`∀`，输入`∖to`可以得到箭头符号`→`。"
msgstr ""

#: Game.Levels.Basic.L04_Inductive
msgid "请写出一个表达式，它的类型是`{α : Sort u} -> α -> α -> Prop`。\n"
"游戏引擎已经定义了 `Eq` 类型，你可以直接使用它。"
msgstr ""

#: Game.Levels.Basic.L04_Inductive
msgid "请尝试输入 `exact Eq`"
msgstr ""

#: Game.Levels.Basic.L04_Inductive
msgid "总结：\n"
"- 我们可以用 `inductive` 命令来定义新的类型；\n"
"- `inductive` 绑定一个名字到某个指定的类型，同时生成了一系列的函数作为这个新类型的公理。"
msgstr ""

#: Game.Levels.Basic.L04_Inductive
msgid "等价关系 `Eq a b`\n"
"```lean\n"
"inductive Eq : {α : Sort u} → α → α → Prop where\n"
"  | refl : (a : α) → Eq a a\n"
"```"
msgstr ""

#: Game.Levels.Basic.L04_Inductive
msgid "`Eq.refl`"
msgstr ""

#: Game.Levels.Basic.L04_Inductive
msgid "`Eq.rec`"
msgstr ""

#: Game.Levels.Basic
msgid "基本类型"
msgstr ""

#: Game.Levels.Eq.L01_EqRefl
msgid "Eq 的构造函数 refl"
msgstr ""

#: Game.Levels.Eq.L01_EqRefl
msgid "# Eq 的构造函数 Eq.refl\n"
"在上一关中，我们定义了一个叫做 `Eq` 的归纳类型，它有一个构造器 `Eq.refl`，它的类型是 `(a : α) -> Eq a a`。\n"
"```lean\n"
"inductive Eq : {α : Sort u} -> α -> α -> Prop where\n"
"  | refl : (a : α) -> Eq a a\n"
"```\n"
"因为 `Eq.refl` 的类型是一个箭头表达式，所以它是一个函数。它接受一个类型为 `α` 的值 `a`，并返回一个类型为 `Eq a a` 的值。\n"
"我们来使用一下这个构造函数。\n"
"```lean\n"
"constructor Eq.refl.{u} : ∀ {α : Sort u} (a : α), Eq a a\n"
"```\n"
"\n"
"在 lean4 里使用函数的方式和其他变成语言有所不同：\n"
"- 函数名字后面紧跟着参数，比如 `Eq.refl a`，而**不需要用括号包裹**；\n"
"- 函数声明中用花括号包裹的参数表示隐式参数，比如 `{α : Sort u}`，默认不需要传入，lean4 会自动推到它；\n"
"- 如果想要显式传入隐式参数，你可以在函数名前添加 `@` 符号，比如 `@Eq.refl α a`。"
msgstr ""

#: Game.Levels.Eq.L01_EqRefl
msgid "- 请尝试构造一个 Lambda 表达式 `fun (xxx : xxx) => xxx`，并且调用 `Eq.refl` 构造函数，不要忘记`exact`关键字。\n"
"- 你可以输入 `\\` 和 `a`，它们会自动转化成 `α`。"
msgstr ""

#: Game.Levels.Eq.L01_EqRefl
msgid "- 你可以使用 `exact fun {α : Sort u} (a : α) => Eq.refl a`；\n"
"- 或者显式传入隐式参数 `exact fun {α : Sort u} (a : α) => @Eq.refl α a`；\n"
"- 你甚至可以充分利用 lean4 编译器的自动补全功能，使用 `exact fun a => Eq.refl a`。\n"
"\n"
"我想你领略了 lean4 语法的多样性灵活性，我不希望你感到困惑，作为初学者，我也不建议你使用过于省略的功能。"
msgstr ""

#: Game.Levels.Eq.L02_EqRec
msgid "Eq 的循环子和对称性"
msgstr ""

#: Game.Levels.Eq.L02_EqRec
msgid "# Eq 的循环子和对称性\n"
"lean4 的编译器自动给 `Eq` 类型生成了一个循环子，叫做 `Eq.rec`。它的类型是\n"
"```lean\n"
"recursor Eq.rec.{u_1, u} : {α : Sort u} →\n"
"  {a : α} → {motive : (a_1 : α) → Eq a a_1 → Sort u_1} → motive a (Eq.refl a) → {a_1 : α} → (t : Eq a a_1) → motive a_1 t\n"
"```\n"
"第一次看到这个循环子，大部分人都会感到困惑。\n"
"这个循环子的核心是 `motive` 函数，它接受两个参数：一个类型为 `α` 的值 `a_1` 和一个类型为 `Eq a a_1` 的值，返回一个 `Sort u_1` 类型的值。\n"
"我们只需要证明特例 `motive a` 成立，我们就可以证明所有情况下 `motive` 都成立。\n"
"\n"
"在这个关卡里，我们引入两个新的**策略**：`intro` 和 `apply`。\n"
"\n"
"## 策略 intro\n"
"如果当前目标是 `P -> Q`，那么可以使用 `intro h`，将目标转化成一个条件 `h : P` 和一个新目标 `Q`。从数学上来说， 这个操作叫做 `induction`， 要证明 `P -> Q`，可以转为：假设 `P` 成立，证明 `Q` 成立。\n"
"本质上，`intro` 是一个语法树转化函数，它会等待用户输入 `Q` 的证明 `q`，然后构建出 `fun (h : P) => q` 这个表达式。而这个表达式的类型就是 `P -> Q`。\n"
"\n"
"## 策略 apply\n"
"如果当前目标是证明 `Q`，并且存在一个证明 `t : P -> Q`，我们可以使用 `apply t` 将目标转化为 `P`。\n"
"本质上，`apply` 也是一个语法树转化函数，它会等待用户输入 `P` 的证明 `p`，然后构建出 `t p` 这个表达式，而这个表达式的类型就是 `Q`。"
msgstr ""

#: Game.Levels.Eq.L02_EqRec
msgid "`Eq` 的对称性，即 `Eq a b -> Eq b a`。"
msgstr ""

#: Game.Levels.Eq.L02_EqRec
msgid "请尝试使用 `intro α a` 来转化证明目标，你可以输入 `\\` 和 `a`，来输入 `α`。"
msgstr ""

#: Game.Levels.Eq.L02_EqRec
msgid "请尝试使用 `apply Eq.rec` 来转化证明目标，lean4会自动推断使用 `Eq.rec` 所需要的参数。"
msgstr ""

#: Game.Levels.Eq.L02_EqRec
msgid "请尝试使用 `exact Eq.refl a`"
msgstr ""

#: Game.Levels.Eq.L02_EqRec
msgid "或者 `apply Eq.refl`"
msgstr ""

#: Game.Levels.Eq.L02_EqRec
msgid "你可以使用 `intro` 和 `apply` 策略来证明 `Eq` 的对称性\n"
"```lean\n"
"intro α a\n"
"apply Eq.rec\n"
"apply Eq.refl\n"
"```\n"
"你也可以直接构建出 Lambda 表达式\n"
"```lean\n"
"exact fun {α : Sort u} => fun {a : α} => @Eq.rec α a (fun (x : α) (_ : Eq a x) => Eq x a) (Eq.refl a)\n"
"````\n"
"来证明 `Eq` 的对称性。这里注意两点：\n"
"  - 因为 lean4 的隐式参数推断会出现问题，所以使用了 `@Eq.rec`；\n"
"  - motive函数是 `fun (x : α) (_ : Eq a x) => Eq x a`。\n"
"\n"
"**确认你真的明白 `apply Eq.rec` 做了什么事情**。这是理解 lean4 的关键。\n"
"\n"
"- 使用到的是 `@Eq.rec α a (fun (x : α) (_ : Eq a x) => Eq x a)`；\n"
"- 它的类型是 `Eq a a -> {a_1 : α} -> (t : Eq a a_1) -> Eq a_1 a`；\n"
"- 在lean4编译器看来 `{a_1 : α} -> (t : Eq a a_1) -> Eq a_1 a`和原始目标的 `{b : α} -> Eq a b -> Eq b a` 是完全等价的；\n"
"- 所以 `apply rec` 后的新目标变成 `Eq a a`。"
msgstr ""

#: Game.Levels.Eq.L02_EqRec
msgid "如果当前目标是 `P -> Q`，那么可以使用 `intro h`，将目标转化成一个条件 `h : P` 和一个新目标 `Q`。从数学上来说， 这个操作叫做 `induction`， 要证明 $P -> Q$，可以转为：假设 `P` 成立，证明 `Q` 成立。\n"
"本质上，`intro` 是一个语法树转化函数，它会等待用户输入 `Q` 的证明 `q`，然后构建出 `fun (h : P) => q` 这个表达式。而这个表达式的类型就是 `P -> Q`。"
msgstr ""

#: Game.Levels.Eq.L02_EqRec
msgid "如果当前目标是证明 `Q`，并且存在一个证明 `t : P -> Q`，我们可以使用 `apply t` 将目标转化为 `P`。\n"
"本质上，`apply` 也是一个语法树转化函数，它会等待用户输入 `P` 的证明 `p`，然后构建出 `t p` 这个表达式，而这个表达式的类型就是 `Q`。"
msgstr ""

#: Game.Levels.Eq.L03_EqTrans
msgid "Eq 的传递性"
msgstr ""

#: Game.Levels.Eq.L03_EqTrans
msgid "# Eq 的传递性"
msgstr ""

#: Game.Levels.Eq.L03_EqTrans
msgid "`Eq` 的传递性，即 `Eq a b -> Eq b c -> Eq a c`。"
msgstr ""

#: Game.Levels.Eq.L03_EqTrans
msgid "要证明 Eq 类型的传递性，你需要使用到公理 `Eq.rec`，策略 `intro` 和 `apply`。"
msgstr ""

#: Game.Levels.Eq.L03_EqTrans
msgid "尝试直接使用 `Eq.rec`"
msgstr ""

#: Game.Levels.Eq.L03_EqTrans
msgid "尝试 apply 一个函数 `fun (xxx : xxx) => xxx`。"
msgstr ""

#: Game.Levels.Eq.L03_EqTrans
msgid "如果你使用的是 apply 自动补全的 `Eq.rec` 的参数，那么你的证明会非常简洁。\n"
"如果你觉得不是很直观，并不那么清楚 `Eq.rec` 究竟是怎么工作的，那么你可以使用 lean4 的如下代码来查看 tactic 自动生成的表达式：\n"
"```lean\n"
"set_option pp.all true\n"
"#print Eq.trans\n"
"```\n"
"这个表达式会被送到 lean4 的内核中进行类型校验，内核发现它的类型正是目标类型，所以它是一个合法的证明。\n"
"```lean\n"
"fun {α : Sort u} {a b c : α} => @Eq.rec α a (fun {b : α} (_ : Eq a b) => Eq b c -> Eq a c) (fun (h : Eq a c) => h) b\n"
"```\n"
"这个表达式还是比较复杂的，关键是要理解 `Eq.rec` 的动机参数\n"
"```lean\n"
"motive := (fun {b : α} (_ : Eq a b) => Eq b c -> Eq a c)\n"
"```\n"
"我建议你可以在草稿纸上拆解一下这个表达式，看看它是如何工作的。\n"
"\n"
"- 使用到的是 `@Eq.rec α a (fun {a_1 : α} (_ : Eq a a_1) => Eq a_1 c -> Eq a c)`；\n"
"- 它的类型是 `(Eq a c -> Eq a c) -> {a_1 : α} -> Eq a a_1 -> Eq a_1 c -> Eq a c`；\n"
"- 因为 `lean4` 能够自动推到隐式参数 `a_1 = b`，所以 `Eq a a_1 -> Eq a_1 c -> Eq a c` 和原始目标 `Eq a b -> Eq b c -> Eq a c` 是等价的；\n"
"- 所以 `apply Eq.rec` 的结果是新目标 `Eq a c -> Eq a c`。"
msgstr ""

#: Game.Levels.Eq.L04_EqMp
msgid "Eq.mp"
msgstr ""

#: Game.Levels.Eq.L04_EqMp
msgid "# Eq.mp"
msgstr ""

#: Game.Levels.Eq.L04_EqMp
msgid "`Eq.mp` 是 Eq 版本的 modus ponens，即 `Eq a b -> a -> b`。"
msgstr ""

#: Game.Levels.Eq.L04_EqMp
msgid "`Eq.mp` 是 Eq 版本的 modus ponens, 可以输入 `\\` 加 `b` 来输入 `β`。"
msgstr ""

#: Game.Levels.Eq.L04_EqMp
msgid "你已经可以使用 `apply Eq.rec` 了，不需要 `intro β`"
msgstr ""

#: Game.Levels.Eq.L04_EqMp
msgid "证明的具体细节是：\n"
"- 使用到的是 `@Eq.rec (Sort u) α (fun {a_1 : Sort u} (_ : Eq a a_1) => α -> a_1)`；\n"
"- 它的类型是 `α -> α -> {a_1 : Sort u} -> Eq a a_1 -> α -> a_1`；\n"
"- 在 `lean4` 看来 `{a_1 : Sort u} -> Eq a a_1 -> α -> a_1` 和 `{β : Sort u} -> Eq α β -> α -> β` 是等价的；\n"
"- 所以 `apply Eq.rec` 产生新目标 `α -> α`。\n"
"\n"
"希望这三个题目坐下来，你能完全理解如何使用 `Eq.rec`。\n"
"\n"
"- `Eq.rec` 是和 `Eq.refl` 相对的概念。\n"
"- `Eq.refl` 是一个 **引入规则** (introduction rule)。当结论中有 `Eq` 类型时，通常会用到它。\n"
"- `Eq.rec` 是一个 **消去规则** (elimination rule)。当条件中有 `Eq` 类型时，通常会用到它。\n"
"\n"
"不只是 `Eq` 类型，所有的类型都会有它的 **引入规则** 和 **消去规则**，这个结论在数理逻辑里相当深刻。"
msgstr ""

#: Game.Levels.Eq.L05_EqMpr
msgid "Eq.mpr"
msgstr ""

#: Game.Levels.Eq.L05_EqMpr
msgid "# Eq.mpr"
msgstr ""

#: Game.Levels.Eq.L05_EqMpr
msgid "`Eq.mpr` 是 Eq 版本的 modus ponens 的逆向版本 (reverse)，即 `Eq a b -> b -> a`。"
msgstr ""

#: Game.Levels.Eq.L05_EqMpr
msgid "你可以尝试使用证明过的定理 `Eq.symm` 和 `Eq.mp`。在此之前请先使用 `intro α β h`"
msgstr ""

#: Game.Levels.Eq.L05_EqMpr
msgid "请你一定要搞清楚 `apply Eq.mp` 和 `apply Eq.symm h` 究竟做了什么。不要因为 `apply` 强大的参数补全功能，反而迷失了内部原理，买椟还珠。"
msgstr ""

#: Game.Levels.Eq.L06_EqSubst
msgid "Eq.subst"
msgstr ""

#: Game.Levels.Eq.L06_EqSubst
msgid "# Eq.subst"
msgstr ""

#: Game.Levels.Eq.L06_EqSubst
msgid "`Eq.subst` 是替换原理，即 `Eq a b -> motive a -> motive b`。"
msgstr ""

#: Game.Levels.Eq
msgid "Eq 类型"
msgstr ""

#: Game.Levels.Iff.L01_IffIntro
msgid "Iff 类型"
msgstr ""

#: Game.Levels.Iff.L01_IffIntro
msgid "# Iff 类型\n"
"在这一章节，我们要碰到 `lean4` 中的一个新命令 `structure`，它也是用来声明一个新类型。\n"
"读者可能会好奇，我不是说过 `inductive` 已经足够了，为什么还会有 `structure`？\n"
"答案是为了方便。你可以认为 `structure` 是一个语法糖，在 `inductive` 的基础上添加了一些新的功能。\n"
"\n"
"在 lean4 中，逻辑连接符 `Iff` 类型是这样定义的：\n"
"```lean\n"
"structure Iff (a b : Prop) : Prop where\n"
"  intro ::\n"
"  mp : a -> b\n"
"  mpr : b -> a\n"
"```\n"
"\n"
"本质上，它同时定义了三个函数：\n"
"- (引入规则) `Iff.intro : {a b : Prop} -> (a -> b) -> (b -> a) -> Iff a b`\n"
"- (消去规则) `Iff.mp : {a b : Prop} -> Iff a b -> a -> b`\n"
"- (消去规则) `Iff.mpr : {a b : Prop} -> Iff a b -> b -> a`\n"
"\n"
"你可以简单地将这三个函数看成 `Iff` 类型的三个公理。\n"
"如果分开定义类型和对应公理，既繁琐又容易出错，所以 `lean4` 设计了 `structure` 将这些过程打包封装。\n"
"同时，因为从语法上能够体现这种绑定关系，lean4 的编译器也能对 `structure` 结构进行一些优化，增加运行效率。\n"
"\n"
"比如，lean4 也支持这样定义 `Iff` 类型：\n"
"```lean\n"
"inductive Iff : Prop -> Prop -> Prop where\n"
"  | intro : {a b : Prop} -> (a -> b) -> (b -> a) -> Iff a b\n"
"axiom Iff.mp : {a : Prop} -> {b : Prop} -> Iff a b -> a -> b\n"
"axiom Iff.mpr : {a : Prop} -> {b : Prop} -> Iff a b -> b -> a\n"
"```\n"
"但是，如果要让编译器能够分析出这三个部分的关系并优化，编译器的具体实现将会非常复杂，得不偿失。\n"
"当然，lean4 也会自动生成公理 `Iff.rec`，就这个类型而言用处不大，我们就不展开讲了。"
msgstr ""

#: Game.Levels.Iff.L01_IffIntro
msgid "基于 Iff.intro 我们可以证明它的自指性"
msgstr ""

#: Game.Levels.Iff.L01_IffIntro
msgid "借助这个证明，我们可以看到 `apply` 的具体细节。\n"
"- 首先 `Iff.intro` 实际上可以证明 `{a : Prop} -> {a : Prop} -> (a -> a) -> (a -> a) -> Iff a a`；\n"
"- 观察对比目标命题，`Iff.intro` 包含两个相同的条件 `(a -> a)` 和 `(a -> a)`，`apply`会将这两个条件转化成新的目标。"
msgstr ""

#: Game.Levels.Iff.L01_IffIntro
msgid "Iff 类型\n"
"```lean\n"
"inductive Iff : Prop -> Prop -> Prop where\n"
"  | intro : {a : Prop} -> {b : Prop} -> (a -> b) -> (b -> a) -> Iff a b\n"
"```"
msgstr ""

#: Game.Levels.Iff.L01_IffIntro
msgid "Iff.intro"
msgstr ""

#: Game.Levels.Iff.L01_IffIntro
msgid "Iff.mp"
msgstr ""

#: Game.Levels.Iff.L01_IffIntro
msgid "Iff.mpr"
msgstr ""

#: Game.Levels.Iff.L02_IffTrans
msgid "Iff 的传递性"
msgstr ""

#: Game.Levels.Iff.L02_IffTrans
msgid "# Iff 的传递性"
msgstr ""

#: Game.Levels.Iff.L02_IffTrans
msgid "Iff 的传递性"
msgstr ""

#: Game.Levels.Iff.L02_IffTrans
msgid "你可以先尝试使用 `intro a b c hab hbc`"
msgstr ""

#: Game.Levels.Iff.L02_IffTrans
msgid "你可以先尝试使用 `Iff.intro`"
msgstr ""

#: Game.Levels.Iff.L02_IffTrans
msgid "你可以先尝试构造一个函数 `fun (xxx : xxx) => xxx`，并且使用 `Iff.mp`"
msgstr ""

#: Game.Levels.Iff.L02_IffTrans
msgid "你可以先尝试构造一个函数 `fun (xxx : xxx) => xxx`，并且使用 `Iff.mpr`"
msgstr ""

#: Game.Levels.Iff.L03_IffOfEq
msgid "Iff与Eq的关系"
msgstr ""

#: Game.Levels.Iff.L03_IffOfEq
msgid "# Iff与Eq的关系"
msgstr ""

#: Game.Levels.Iff.L03_IffOfEq
msgid "Iff 与 Eq 的关系"
msgstr ""

#: Game.Levels.Iff.L03_IffOfEq
msgid "条件里有 `Eq`，所以可以尝试 `Eq.rec`"
msgstr ""

#: Game.Levels.Iff
msgid "Iff 类型"
msgstr ""

#: Game.Levels.And.L01_AndSymm
msgid "And.symm"
msgstr ""

#: Game.Levels.And.L01_AndSymm
msgid "# And 类型\n"
"And 类型也是通过 structure 来构建的\n"
"```lean\n"
"structure And (a b : Prop) : Prop where\n"
"  intro ::\n"
"  left : a\n"
"  right : b\n"
"```\n"
"它本质上定义了这三个函数：\n"
"- (引入规则) `And.intro : (a b : Prop) -> And a b`\n"
"- (消去规则) `And.left : {a b : Prop} -> And a b -> a`\n"
"- (消去规则) `And.right : {a b : Prop} -> And a b -> b`"
msgstr ""

#: Game.Levels.And.L01_AndSymm
msgid "`And` 的对称性"
msgstr ""

#: Game.Levels.And.L01_AndSymm
msgid "请使用上述三个函数 `And.intro`, `And.left` 和 `And.right`"
msgstr ""

#: Game.Levels.And.L01_AndSymm
msgid "And 类型\n"
"```lean\n"
"structure And (a b : Prop) : Prop where\n"
"  intro ::\n"
"  left : a\n"
"  right : b\n"
"```"
msgstr ""

#: Game.Levels.And.L01_AndSymm
msgid "`And.intro`"
msgstr ""

#: Game.Levels.And.L01_AndSymm
msgid "`And.left`"
msgstr ""

#: Game.Levels.And.L01_AndSymm
msgid "`And.right`"
msgstr ""

#: Game.Levels.And.L02_AndAssoc
msgid "and_assoc"
msgstr ""

#: Game.Levels.And.L02_AndAssoc
msgid "# And 的结合律"
msgstr ""

#: Game.Levels.And.L02_AndAssoc
msgid "`And` 的结合律"
msgstr ""

#: Game.Levels.And.L02_AndAssoc
msgid "如果一个表达式是 `h : And a b`，我们可以将 `And.left h` 简化为 `h.left`。"
msgstr ""

#: Game.Levels.And
msgid "And 类型"
msgstr ""

#: Game.Levels.Or.L01_OrElim
msgid "Or.elim"
msgstr ""

#: Game.Levels.Or.L01_OrElim
msgid "# Or 类型\n"
"在这个关卡里，我们将学习 `Or` 类型在 lean4 中是如何构造的。\n"
"```lean\n"
"inductive Or (a b : Prop) : Prop where\n"
"  | inl : {a b : Prop} -> (h : a) -> Or a b\n"
"  | inr : {a b : Prop} -> (h : b) -> Or a b\n"
"```\n"
"`Or` 类型是一个归纳类型，它有两个构造器 `Or.inl` 和 `Or.inr`。\n"
"\n"
"同时，lean4 编译器会自动生成一个 `Or.rec` 函数，用于模式匹配。\n"
"```lean\n"
"recursor Or.rec : ∀ {a b : Prop} {motive : Or a b → Prop},\n"
"  (∀ (h : a), motive (@Or.inl a b h)) → (∀ (h : b), motive (@Or.inr a b h)) → ∀ (t : Or a b), motive t\n"
"```\n"
"`Or.rec` 函数表示，我们可以证明某个命题在条件 `ha : a` 和 `hb : b` 下都成立，那么 `h: Or a b` 下则成立。"
msgstr ""

#: Game.Levels.Or.L01_OrElim
msgid "Or 的消去率"
msgstr ""

#: Game.Levels.Or.L01_OrElim
msgid "请输入 `intro a b c`"
msgstr ""

#: Game.Levels.Or.L01_OrElim
msgid "尝试直接 apply `Or.rec`"
msgstr ""

#: Game.Levels.Or.L01_OrElim
msgid "这里产生了两个目标，我们分别证明。首先使用 intro 来引入变量 ha h1 h2"
msgstr ""

#: Game.Levels.Or.L01_OrElim
msgid "Or 类型\n"
"```lean\n"
"inductive Or (a b : Prop) : Prop where\n"
"  | inl : {a b : Prop} -> (h : a) -> Or a b\n"
"  | inr : {a b : Prop} -> (h : b) -> Or a b\n"
"```"
msgstr ""

#: Game.Levels.Or.L01_OrElim
msgid "Or.inl"
msgstr ""

#: Game.Levels.Or.L01_OrElim
msgid "Or.inr"
msgstr ""

#: Game.Levels.Or.L01_OrElim
msgid "Or.rec"
msgstr ""

#: Game.Levels.Or.L02_OrSymm
msgid "Or.symm"
msgstr ""

#: Game.Levels.Or.L02_OrSymm
msgid "# Or 的对称性"
msgstr ""

#: Game.Levels.Or.L02_OrSymm
msgid "Or 的对称性"
msgstr ""

#: Game.Levels.Or.L02_OrSymm
msgid "尝试使用`Or.elim`"
msgstr ""

#: Game.Levels.Or.L03_OrAssoc
msgid "or_assoc"
msgstr ""

#: Game.Levels.Or.L03_OrAssoc
msgid "# Or 的结合律"
msgstr ""

#: Game.Levels.Or.L03_OrAssoc
msgid "Or 的结合律"
msgstr ""

#: Game.Levels.Or
msgid "Or 类型"
msgstr ""

#: Game.Levels.Not.L01_True
msgid "True 类型与 False 类型"
msgstr ""

#: Game.Levels.Not.L01_True
msgid "# True 类型与 False 类型\n"
"这一节，我们来看看lean4中是如何构建真类型和假类型的。\n"
"\n"
"## True 类型\n"
"真类型是一个inductive类型\n"
"```lean\n"
"inductive True : Prop where\n"
"  | intro : True\n"
"```\n"
"它包含一个无参数的构造器，即 `True.intro : True`。\n"
"它的循环子如下所示，实际上没有什么用处：\n"
"```lean\n"
"recursor True.rec.{u} : {motive : True → Sort u} → motive True.intro → (t : True) → motive t\n"
"```\n"
"\n"
"## False 类型\n"
"假类型是一个inductive类型，它不包含任何构造器。\n"
"```lean\n"
"inductive False : Prop\n"
"```\n"
"它的循环子非常重要，任何没有构造器的类型都是假类型：\n"
"```lean\n"
"recursor False.rec.{u} : (motive : False → Sort u) → (t : False) → motive t\n"
"```\n"
"它表示：如果前提假设错误，那么我们可以得到任何结论。\n"
"这正是诡辩论的基础，使用一个错误的前提，推导出想要的结论。\n"
"虽然整个过程的逻辑是对的，但是实际上没有任何信息价值。\n"
"因为我们使用相同的错误前提可以推导出完全相反的结论。\n"
"如果一个观点正着说反着说都是对的，那它就毫无价值。\n"
"\n"
"## 对比\n"
"\n"
"｜ 性质 ｜ 真类型 | 假类型 |\n"
"｜------｜------｜------｜\n"
"｜构造器｜True.intro｜无｜\n"
"｜循环子｜没用｜False.rec｜"
msgstr ""

#: Game.Levels.Not.L01_True
msgid "在 lean4 中经常用到的一个公理是 `trivial`，它表示 `True` 就是 `True`。"
msgstr ""

#: Game.Levels.Not.L01_True
msgid "True 类型\n"
"```lean\n"
"inductive True : Prop where\n"
"  | intro : True\n"
"```"
msgstr ""

#: Game.Levels.Not.L01_True
msgid "False 类型\n"
"```lean\n"
"inductive False : Prop\n"
"```"
msgstr ""

#: Game.Levels.Not.L01_True
msgid "`True.intro`"
msgstr ""

#: Game.Levels.Not.L01_True
msgid "`False.rec`"
msgstr ""

#: Game.Levels.Not.L02_absurd
msgid "Not 类型"
msgstr ""

#: Game.Levels.Not.L02_absurd
msgid "# Not 类型\n"
"在 lean4 里 Not 类型像是一个函数的别名，它通过 `def` 命令声明出来\n"
"```lean\n"
"def Not (a : Prop) : Prop := a -> False\n"
"```\n"
"它表示如果命题 a 是正确的那么 `False` 将是正确的。\n"
"因为 `False` 不可能是正确的，所以 `a` 不正确。\n"
"在使用 lean4 构建数学公理体系时，\n"
"不允许出现 `False` 的构造器。如果能构造出类型为 False 的命题，那么表示这个公理体系自相矛盾。\n"
"\n"
"还记得 False 的循环子吗？这道题目会用到它\n"
"```lean\n"
"recursor False.rec : (motive : False → Sort u) → (t : False) → motive t\n"
"```\n"
"lean4 可能无法推测 `False.rec` 需要用到的 motive 函数，你可以使用 `apply @False.rec fun (xxx : xxx) => xxx` 显式传入 motive 函数。"
msgstr ""

#: Game.Levels.Not.L02_absurd
msgid "荒谬定理"
msgstr ""

#: Game.Levels.Not.L02_absurd
msgid "Not 类型\n"
"```lean\n"
"def Not (a : Prop) : Prop := a -> False\n"
"```"
msgstr ""

#: Game.Levels.Not.L03_NotNotIntro
msgid "双重否定的引入规则"
msgstr ""

#: Game.Levels.Not.L03_NotNotIntro
msgid "# 双重否定的引入规则"
msgstr ""

#: Game.Levels.Not.L03_NotNotIntro
msgid "双重否定"
msgstr ""

#: Game.Levels.Not.L03_NotNotIntro
msgid "`Not (Not p)` 等价于 `p -> False -> False`"
msgstr ""

#: Game.Levels.Not.L03_NotNotIntro
msgid "- 这里涉及到一个非常深刻的概念，我们也无法证明 `(p: Prop) -> Not (Not p) -> p`；\n"
"- 更深刻的是：排中律在这里并不是天然存在的公理。"
msgstr ""

#: Game.Levels.Not.L04_NotNotEm
msgid "双重否定版本的排中律"
msgstr ""

#: Game.Levels.Not.L04_NotNotEm
msgid "# 双重否定版本的排中律\n"
"\n"
"这里涉及到一个非常深刻的概念\n"
"- 我们可以证明双重否定版本的排中律 `(a : Prop) -> Not (Not (Or a (Not a)))`，\n"
"- 但是无法证明排中律 `(a : Prop) -> Or a (Not a)`；\n"
"- 我们也无法证明双重否定的 **消去规则** `(p: Prop) -> Not (Not p) -> p`；\n"
"- 更深刻的是：在依赖类型论中，排中律并不是天然存在的公理。\n"
"\n"
"你可以直接声明排中律 `axiom em : (a : Prop) -> Or a (Not a)`。\n"
"但是逻辑学家选择不这样做。在 lean4 里，先声明了**选择公理**，然后通过选择公理来证明排中律。\n"
"如果你感兴趣，可以在 lean4 代码编辑界面输入 `#print Classical.em` 来查看具体证明过程。\n"
"\n"
"逻辑学家喜欢将公理最少化，如果发现一个公理能被其他公理证明，他们就非常开心。\n"
"逻辑学家觉得公理越少，逻辑系统越简洁。但是，事实上逻辑系统广度的减少导致了逻辑体系深度的增加，反而造成了逻辑体系的复杂。\n"
"而复杂性导致了难以学习入门，这也是形式化证明系统难以推广的原因吧。就像让小学生不学加减乘除法而直接学习群论，并不符合客观学习规律。"
msgstr ""

#: Game.Levels.Not.L04_NotNotEm
msgid "双重否定"
msgstr ""

#: Game.Levels.Not.L04_NotNotEm
msgid "这道题目会比较困难，需要巧妙利用 Not 的定义，它本质上是个函数。"
msgstr ""

#: Game.Levels.Not.L04_NotNotEm
msgid "`apply Or.inr`"
msgstr ""

#: Game.Levels.Not
msgid "Not 类型"
msgstr ""

#: Game.Levels.Exists.L01_Exists
msgid "Exists 类型"
msgstr ""

#: Game.Levels.Exists.L01_Exists
msgid "# Exists 类型\n"
"\n"
"Exists 类型相对来说比较抽象，它是这样定义的\n"
"```lean\n"
"inductive Exists : {α : Sort u} -> (p : α -> Prop) -> Prop where\n"
"  | intro : {α : Sort u} -> {p : α -> Prop} -> (w : α) -> (h : p w) -> Exists p\n"
"```\n"
"它的构造器接受一个 `α` 的类型实例 `w`，以及对应特例命题 `p w` 的证明，返回一个类型为 `Exists p` 的命题。\n"
"\n"
"它的循环子是\n"
"```lean\n"
"recursor Exists.rec.{u} : ∀ {α : Sort u} {p : α → Prop} {motive : Exists p → Prop},\n"
"  (∀ (w : α) (h : p w), motive (Exists.intro w h)) → ∀ (t : Exists p), motive t\n"
"```\n"
"它表示条件中的 `t : Exists p` 可以转化成证明具体的特例 `(w : α)` 和 `(h : p w)`"
msgstr ""

#: Game.Levels.Exists.L01_Exists
msgid "Exists.imp"
msgstr ""

#: Game.Levels.Exists.L01_Exists
msgid "尝试使用`Exists.rec`转化条件`Exists p`"
msgstr ""

#: Game.Levels.Exists.L01_Exists
msgid "尝试使用`Exists.intro`转化目标`Exists q`"
msgstr ""

#: Game.Levels.Exists.L01_Exists
msgid "Exists 类型\n"
"```lean\n"
"inductive Exists {α : Sort u} (p : α → Prop) : Prop where\n"
"  | intro (w : α) (h : p w) : Exists p\n"
"```"
msgstr ""

#: Game.Levels.Exists.L01_Exists
msgid "Exists.intro"
msgstr ""

#: Game.Levels.Exists.L01_Exists
msgid "Exists.rec"
msgstr ""

#: Game.Levels.Exists
msgid "Exists 类型"
msgstr ""

#: Game
msgid "Lean4 快速入门"
msgstr ""

#: Game
msgid "# Lean4 快速入门\n"
"\n"
"欢迎来到 Lean4 快速入门教程！\n"
"\n"
"Lean4 是一个现代的定理证明助手和函数式编程语言。通过本教程，你将学习：\n"
"\n"
"* 基本类型系统\n"
"* Eq 类型\n"
"* Iff 类型\n"
"* And 类型\n"
"* Or 类型\n"
"* Not 类型\n"
"* Exists 类型\n"
"\n"
"本教程采用游戏化的方式，通过循序渐进的关卡设计，帮助你掌握 Lean4 的核心概念。每个关卡都包含详细的解释和练习，让你在实践中学习。\n"
"\n"
"网上很多教程跳过了一些重要的概念，比如类型系统，而是以lean4复杂的策略系统切入，非常不符合学习过程。\n"
"因此我编制了本教程。我们将从最基本的类型系统开始，逐步深入，帮助你理解 Lean4 的核心概念。\n"
"\n"
"## 相关资料\n"
"- 本项目依赖的项目 lean4game: https://github.com/leanprover-community/lean4game\n"
"- 本项目依赖的项目 GameSkeleton: https://github.com/hhu-adam/GameSkeleton\n"
"- 线上的 lean4 代码编辑环境 lean4web: https://live.lean-lang.org/\n"
"\n"
"- lean4 项目源代码：https://github.com/leanprover/lean4\n"
"- lean4 的开源数学定理库 mathlib4: https://github.com/leanprover-community/mathlib4\n"
"- Theorem Proving in Lean 4：https://lean-lang.org/theorem_proving_in_lean4/#theorem-proving-in-lean-4\n"
"- Functional Programming in Lean：https://lean-lang.org/functional_programming_in_lean/\n"
"- Metaprogramming in Lean 4: https://leanprover-community.github.io/lean4-metaprogramming-book/"
msgstr ""

#: Game
msgid "*Game version: 0.0.1*"
msgstr ""

#: Game
msgid "Lean4 快速入门"
msgstr ""

#: Game
msgid "Lean4 快速入门"
msgstr ""
